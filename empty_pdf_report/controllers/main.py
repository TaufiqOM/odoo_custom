# -*- coding: utf-8 -*-
from odoo import http
from odoo.http import request

class EmptyPDFReportController(http.Controller):
    
    @http.route('/empty_pdf_report/generate', type='http', auth='user', website=False)
    def generate_empty_pdf_report(self, **kw):
        """Generate and return empty PDF report"""
        # Get the report action directly
        report = request.env['ir.actions.report'].sudo().search([
            ('report_name', '=', 'empty_pdf_report.empty_pdf_report_template')
        ], limit=1)
        
        if not report:
            # Create a simple empty PDF if report not found
            from io import BytesIO
            from reportlab.pdfgen import canvas
            from reportlab.lib.pagesizes import A4
            from datetime import datetime
            
            buffer = BytesIO()
            c = canvas.Canvas(buffer, pagesize=A4)
            width, height = A4
            
            # Add title
            c.setFont("Helvetica-Bold", 24)
            c.drawCentredString(width/2, height-100, "Empty PDF Report")
            
            # Add content
            c.setFont("Helvetica", 12)
            c.drawCentredString(width/2, height-200, "This is an empty PDF report generated by the custom module.")
            c.drawCentredString(width/2, height-220, "Generated on: " + datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
            
            c.showPage()
            c.save()
            
            pdf_content = buffer.getvalue()
            buffer.close()
        else:
            # Use the actual report
            report_data = {}
            pdf_content, content_type = report._render_qweb_pdf(report.report_name, [0], data=report_data)
        
        pdfhttpheaders = [
            ('Content-Type', 'application/pdf'),
            ('Content-Length', len(pdf_content)),
            ('Content-Disposition', 'inline; filename="Empty_Report.pdf"'),
        ]
        return request.make_response(pdf_content, headers=pdfhttpheaders)
